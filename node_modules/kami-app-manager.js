  var kamiFileManager = require('./kami-file-manager');
  var exec = require('child_process').exec;
  var cwd = require('child_process').cwd;
  var fs = require('fs');
  var ip = require('ip');

  var exports = module.exports = {};
  exports.generateAndroidRunnable = generateAndroidRunnable;
  exports.generateAntPropertiesFiles = generateAntPropertiesFiles;
  exports.generateIOSRunnable = generateIOSRunnable;   
  exports.generateProjectBundleZip = generateProjectBundleZip;  

  var CMD_OPTIONS_IOS_PLATFORM_DIR;
  var CMD_OPTIONS_APPDIR;

  function generateProjectBundleZip(appdir, appName, rootdir, res){
    generateIOSRunnable(appdir, appName, true, rootdir, res);
  }

  function generateAndroidRunnable(appdir, appName, rootdir, res){
     var appNameWithoutSpaces = appName.replace(/ /g,'_');
      //Changing the current work directory to the specific cordova project folder
      CMD_OPTIONS_APPDIR = {
        cwd: appdir
      }
    exec('ionic platform add android', CMD_OPTIONS_APPDIR ,function(stdout, stderr){
      exec('ionic platform ls',CMD_OPTIONS_APPDIR,function(stdout, stderr){
      // defaultCallbackBehaviour(stdout, stderr);
      console.log('Android platform added with success!');
      keystoreName = appName.replace(/ /g,'-');
      generateAntPropertiesFiles(rootdir, appdir, keystoreName);
      var keytoolGenerationCommand =  'keytool -genkey -v -keystore '.concat(keystoreName).concat('.keystore -keypass kamisama -alias ').concat(keystoreName).concat(' -dname CN="Kami Sama" -storepass kamisama -keyalg RSA -keysize 2048 -validity 10000');
        exec(keytoolGenerationCommand, CMD_OPTIONS_APPDIR ,function(stdout, stderr){
        console.log(keytoolGenerationCommand);
          exec('ionic build android --release',CMD_OPTIONS_APPDIR,function(stdout, stderr){
            if(stderr)
              console.log(stderr);
            console.log('Android project built with success!');
            var apkFilePath = appdir.concat('platforms/android/ant-build/CordovaApp-release.apk'); 
            var downloadFolderPath = rootdir.concat('/public/temp/');
            var apkFileName = appNameWithoutSpaces.concat('.apk');
            var downloadableApkFilePath = downloadFolderPath.concat(apkFileName);
            if (fs.existsSync(apkFilePath)) {
              //Copy apk file to download folder   
              kamiFileManager.copyFile(apkFilePath, downloadableApkFilePath, function(){
                var currentIpAdress = getCurrentIpAddress();
                var downloadBaseUrl = 'http://'.concat(currentIpAdress).concat(':8080').concat('/temp/').concat(apkFileName);
                res.status(200).send(downloadBaseUrl);
              });
            }
          });
        });
      });    
    });
  }

  function generateAntPropertiesFiles(rootdir, appdir, keystoreName){
    var codeTemplatesPath = rootdir.concat('/server/code_templates');
    var antPropertiesTemplateFilePath = codeTemplatesPath.concat('/sample_ant.properties');
    var projectAntPropertiesFilePath = appdir.concat('platforms/android/ant.properties');
    var keyStoreFilePath = appdir.concat(keystoreName).concat('.keystore');

    kamiFileManager.readDataFromFile(antPropertiesTemplateFilePath, function(data){
      data = data.replace('//Placeholder for keystore path', keyStoreFilePath);
      data = data.replace('//Placeholder for keystore alias', keystoreName);
      data = data.replace('//Placeholder for keystore password', 'kamisama');
      data = data.replace('//Placeholder for keyalias password', 'kamisama');
      kamiFileManager.copyDataIntoFile(data, projectAntPropertiesFilePath);
    });
  } 

  function generateIOSRunnable(appdir, appName, cordovaProjectExportRequested, rootdir, res){
      var appNameWithoutSpaces = appName.replace(/ /g,'_');
      //Changing the current work directory to the specific cordova project folder
      CMD_OPTIONS_APPDIR = {
        cwd: appdir
      }
    //Add OS to the cordova project
    exec('ionic platform add ios', CMD_OPTIONS_APPDIR, function(stdout, stderr){
    defaultCallbackBehaviour(stdout, stderr);
    //Call the hook set to 'before-platform-ls' which is responsible for adding some of the necessary cordova plugins
      exec('ionic platform ls',CMD_OPTIONS_APPDIR,function(stdout, stderr){
      console.log('ios platform added with success!');
          //Compiles the codes generated and cleaned above
          defaultCallbackBehaviour(stdout, stderr);
          exec('ionic build ios --device',CMD_OPTIONS_APPDIR,function(stdout, stderr){
          defaultCallbackBehaviour(stdout, stderr);
          console.log('ios project built with success!');
          //Changing current work directory (cwd) to platforms/ios/build/device, change it back to projectsdir if needed.
          var generatedAppFilePath = appdir.concat('platforms/ios/build/device');
          CMD_OPTIONS_IOS_PLATFORM_DIR = {
            cwd: generatedAppFilePath
          }
        var ipaGenerationCommand = '/usr/bin/xcrun -sdk iphoneos PackageApplication "$(pwd)/'
        .concat(appName)
        .concat('.app" -o "$(pwd)/')
        .concat(appNameWithoutSpaces)
        .concat('.ipa"');

          console.log(ipaGenerationCommand);
          exec(ipaGenerationCommand,CMD_OPTIONS_IOS_PLATFORM_DIR,function(stdout, stderr){
          defaultCallbackBehaviour(stdout, stderr);
          var ipaFilePath = appdir.concat('platforms/ios/build/device/').concat(appNameWithoutSpaces).concat('.ipa');
          // var ipaSigningCommand = 'codesign -v --sign "iPhone Distribution: CWI SOFTWARE LTDA" ').concat('"').concat(ipaFilePath).concat('"');
          // console.log(ipaSigningCommand);
            // exec(ipaSigningCommand,CMD_OPTIONS_IOS_PLATFORM_DIR,function(stdout, stderr){
              var currentIpAdress =  getCurrentIpAddress();
              defaultCallbackBehaviour(stdout, stderr);
              if(!cordovaProjectExportRequested){
                exportOverTheAirDownload(rootdir, generatedAppFilePath, currentIpAdress, appNameWithoutSpaces,res);
              }
              else{
                 var zipFilePath = rootdir.concat('/public/temp/').concat(appName.replace(/ /g,'_')).concat('.zip');
                  var bundleArchiver = kamiFileManager.initZipArchiver(zipFilePath, res, appName,currentIpAdress);
                 exportCordovaProjectBundle(bundleArchiver, appdir);
              }
            // });
          });
        });
      });   
    });
  }

  function exportOverTheAirDownload(rootdir, generatedAppFilePath, currentIpAdress, appNameWithoutSpaces,res){
    var downloadFolderPath = rootdir.concat('/public/temp');
    var iosOTAGenerationCommandFile = rootdir.concat('/server/ota-tools-master/ipa_ota');
    var plistExtension = '.plist';
    var ipaExtension = '.ipa';

    kamiFileManager.copyFile(iosOTAGenerationCommandFile, generatedAppFilePath.concat('/ipa_ota'), function(){
      fs.chmod(generatedAppFilePath.concat('/ipa_ota'), '0777', function(){
             var downloadBaseUrl = 'https://'.concat(currentIpAdress).concat(':8200').concat('/temp/');
      //more info regards 'ipa_ota' command at https://github.com/RichardBronosky/ota-tools
      var OverTheAirAppConfigCommand ='./ipa_ota '.concat(appNameWithoutSpaces).concat('.ipa ').concat(downloadBaseUrl);
      console.log(OverTheAirAppConfigCommand);
      
      exec(OverTheAirAppConfigCommand,CMD_OPTIONS_IOS_PLATFORM_DIR,function(stdout, stderr){  
        var appPlistFileName = appNameWithoutSpaces.concat(plistExtension)
        var OTAplistFilePath = generatedAppFilePath.concat('/').concat(appPlistFileName);
        console.log('Generating .ipa download file...');
        //Copy ipa file to zip 
        var downloadablePlistFilePath = downloadFolderPath.concat('/').concat(appPlistFileName);
          kamiFileManager.copyFile(OTAplistFilePath, downloadablePlistFilePath, function(){

            var ipaFileName = appNameWithoutSpaces.concat(ipaExtension);
            var generatedIpaFilePath = generatedAppFilePath.concat('/').concat(ipaFileName);
            var downloadableIpaFilePath = downloadFolderPath.concat('/').concat(ipaFileName);

            kamiFileManager.copyFile(generatedIpaFilePath, downloadableIpaFilePath, function(){
              console.log('Sending back request');
              res.status(200).send(downloadBaseUrl.concat(appNameWithoutSpaces).concat('.plist'));
            });
        });
      });
      })
    });
  }

  function exportCordovaProjectBundle(bundleArchiver, appdir){
    if(fs.existsSync(appdir)){
      console.log('Generating cordova project bundle...');
      bundleArchiver.bulk([{ src: [ '**/*' ], cwd: appdir, expand: true }]);
      bundleArchiver.finalize();
     }
  }

    function getCurrentIpAddress(){
      return ip.address();
    }

    function defaultCallbackBehaviour(stdout,stderr){
    if (stderr)
      console.log(stderr);
    if(stdout)
      console.log(stdout);
  }