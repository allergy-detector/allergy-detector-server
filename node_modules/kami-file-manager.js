  var fs = require('fs');
  var archiver = require('archiver');
  var replace = require("replace");
  var exports = module.exports = {};

	exports.readDataFromFile = readDataFromFile;
	exports.isEmptyFile = isEmptyFile;
	exports.replaceStringOnFile = replaceStringOnFile;
	exports.addFileToZip = addFileToZip;
	exports.initZipArchiver = initZipArchiver;
	exports.copyDataIntoFile = copyDataIntoFile;
	exports.copyFile = copyFile;

	function readDataFromFile(filePath, callback){
    fs.readFile(filePath, 'utf8', function (err,data) {
      if (err) {
        return console.log(err);
      }
      callback(data);
    });
  }

  function isEmptyFile(filePath){
    return (fs.existsSync(filePath) && fs.statSync(filePath)["size"])<1;
  }

    function replaceStringOnFile(stringToBeReplaced, newString, destinationPath){
    replace({
      regex: stringToBeReplaced,
      replacement: newString,
      paths: destinationPath,
      recursive: true,
      silent: false,
    });
  }

    function addFileToZip(sourceFile, bundleArchiver, destinationName, zipFilePath){
    bundleArchiver.append(fs.createReadStream(sourceFile), { name: destinationName });
    console.log("Added "+sourceFile+" to "+zipFilePath + "!");
  }

  function initZipArchiver(destinationFile, res, appName, currentIpAdress){
    var bundleArchiver = archiver('zip');
    bundleArchiver.on('error', function(err) {
      console.log(err);
    });

    var outputZipFile = fs.createWriteStream(destinationFile);
    outputZipFile.on('close', function() {
    console.log(bundleArchiver.pointer() + ' total bytes');
    console.log('archiver has been finalized and the zipFile file descriptor has closed.');
    console.log('File generated: '+fs.existsSync(destinationFile));
    if(!isEmptyFile(destinationFile)){
      res.status(200).send('http://'.concat(currentIpAdress).concat(':8080').concat('/temp/').concat(appName.replace(/ /g,'_')).concat('.zip'));
    }
    else{
      res.status(500).send('Error Generating File!');
    }
    });

    bundleArchiver.pipe(outputZipFile);

    return bundleArchiver;
  }

  function copyDataIntoFile(data, destinationFile, callback){
    var writeStream = fs.createWriteStream(destinationFile);
    if(data){
      writeStream.write(data, callback);
      console.log(data);
      console.log('To: ' + destinationFile);
    }
  }

  function copyFile(sourceFile, destinationFile, callback){
    if (fs.existsSync(sourceFile) && (fs.statSync(sourceFile)["size"]>1)) {
      var writeStream = fs.createWriteStream(destinationFile);
      var readStream = fs.createReadStream(sourceFile);

      readStream.on('end', function() {
        console.log("Copied "+sourceFile+" to "+ destinationFile);
        if(callback)
          callback();
      });
     readStream.pipe(writeStream);
    }
  }